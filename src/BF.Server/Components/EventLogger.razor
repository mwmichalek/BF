@using BF.Common.Events
@using BF.Common.States
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Lists
@using BF.Service.Events

MESSAGES!

<div style="height:120px;width:100%;border:1px solid #ccc;font:16px/26px Georgia, Garamond, Serif;overflow:auto;">
    @foreach (var msg in Messages) {
        @msg<br />
    }
</div>



@code {
    [Inject]
    public IBeerFactoryEventHandler _eventHandler { get; set; }

    public List<string> Messages = new List<string>();


    protected override async Task OnInitializedAsync() {

        _eventHandler.ComponentStateChangeOccured<ThermometerState>(ThermometerStateChangeOccured);
        _eventHandler.ComponentStateChangeOccured<PidControllerState>(PidControllerStateChangeOccured);
        _eventHandler.ComponentStateChangeOccured<SsrState>(SsrStateChangeOccured);
        //_beerFactoryEventHandler.ComponentStateChangeOccured<PumpState>(PumpStateChangeOccured);

        _eventHandler.ComponentStateRequestOccured<PidControllerState>(PidControllerStateRequestOccured);
        //_beerFactoryEventHandler.ComponentStateRequestOccured<PumpState>(PumpStateRequestOccured);

    }

    void ThermometerStateChangeOccured(ComponentStateChange<ThermometerState> thermometerStateChange) {
        Messages.Insert(0, $"ThermometerStateChangeOccured: {thermometerStateChange.Id} - {thermometerStateChange.CurrentState.Temperature.ToString("0.00")}");
        InvokeAsync(() => StateHasChanged());
    }

    void PidControllerStateChangeOccured(ComponentStateChange<PidControllerState> pidControllerStateChange) {
        Messages.Insert(0, $"PidControllerStateChangeOccured: {pidControllerStateChange.Id} - {pidControllerStateChange.CurrentState.SetPoint}");
        InvokeAsync(() => StateHasChanged());
    }

    void PidControllerStateRequestOccured(ComponentStateRequest<PidControllerState> pidControllerStateRequest) {
        Messages.Insert(0, $"PidControllerStateRequestOccured: {pidControllerStateRequest.Id} - {pidControllerStateRequest.RequestState.SetPoint}");
        InvokeAsync(() => StateHasChanged());
    }

    void SsrStateChangeOccured(ComponentStateChange<SsrState> ssrStateChange) {
        Messages.Insert(0, $"SsrChangeOccured: {ssrStateChange.Id} - {ssrStateChange.CurrentState.Percentage} {ssrStateChange.CurrentState.IsEngaged}");
        InvokeAsync(() => StateHasChanged());
    }

}
