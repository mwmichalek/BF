@using BF.Common.Events
@using BF.Common.States
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Lists
@using BF.Service.Events

MESSAGES!

<div style="height:120px;width:100%;border:1px solid #ccc;font:16px/26px Georgia, Garamond, Serif;overflow:auto;">
    @foreach (var msg in Messages) {
        @msg<br />
    }
</div>



@code {
    [Inject]
    public IBeerFactoryEventHandler _beerFactoryEventHandler { get; set; }

    public List<string> Messages = new List<string>();


    protected override async Task OnInitializedAsync() {

        _beerFactoryEventHandler.SsrChangeOccured(SsrChangeOccured);
        _beerFactoryEventHandler.ConnectionStatusRequestOccured(ConnectionStatusRequestOccured);
        _beerFactoryEventHandler.ConnectionStatusChangeOccured(ConnectionStatusChangeOccured);

        _beerFactoryEventHandler.ComponentStateChangeOccured<ThermometerState>(ThermometerStateChangeOccured);
        _beerFactoryEventHandler.ComponentStateChangeOccured<PidControllerState>(PidControllerStateChangeOccured);
        //_beerFactoryEventHandler.ComponentStateChangeOccured<PumpState>(PumpStateChangeOccured);

        _beerFactoryEventHandler.ComponentStateRequestOccured<PidControllerState>(PidControllerStateRequestOccured);
        //_beerFactoryEventHandler.ComponentStateRequestOccured<PumpState>(PumpStateRequestOccured);

    }

    public void ThermometerStateChangeOccured(ComponentStateChange<ThermometerState> thermometerStateChange) {
        Messages.Insert(0, $"ThermometerStateChangeOccured: {thermometerStateChange.Id} - {thermometerStateChange.CurrentState.Temperature.ToString("0.00")}");
        InvokeAsync(() => StateHasChanged());
    }

    public void PidControllerStateChangeOccured(ComponentStateChange<PidControllerState> pidControllerStateChange) {
        Messages.Insert(0, $"PidControllerStateChangeOccured: {pidControllerStateChange.Id} - {pidControllerStateChange.CurrentState.SetPoint}");
        InvokeAsync(() => StateHasChanged());
    }

    public void PidControllerStateRequestOccured(ComponentStateRequest<PidControllerState> pidControllerStateRequest) {
        Messages.Insert(0, $"PidControllerStateRequestOccured: {pidControllerStateRequest.Id} - {pidControllerStateRequest.RequestState.SetPoint}");
        InvokeAsync(() => StateHasChanged());
    }


    //****************************************************************************************************

    public void SsrChangeOccured(SsrChange ssrChange) {
        Messages.Insert(0, $"SsrChangeOccured: {ssrChange.Id} - {ssrChange.Percentage} {ssrChange.IsEngaged}");
        InvokeAsync(() => StateHasChanged());
    }

    public void ConnectionStatusRequestOccured(ConnectionStatusRequest connectionStatusRequest) {
        Messages.Insert(0, $"ConnectionStatusRequestOccured: {connectionStatusRequest.ClientId}");
        InvokeAsync(() => StateHasChanged());
    }

    public void ConnectionStatusChangeOccured(ConnectionStatusChange connectionStatusChange) {
        Messages.Insert(0, $"ConnectionStatusChangeOccured: {connectionStatusChange.ClientId} - {connectionStatusChange.ConnectionState}");
        InvokeAsync(() => StateHasChanged());
    }

}
