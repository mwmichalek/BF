@inherits BFComponent;

@using Syncfusion.EJ2.Blazor.Inputs
@using Syncfusion.EJ2.Blazor.Buttons
@using BF.Common.Events
@using BF.Common.States
@using BF.Common.Components

<div class="container">
    <div class="row justify-content-center">
        <div class="col-1">
            <EjsButton @ref="PidControllerEnableButton" 
                       CssClass="e-flat"
                       IsPrimary="true"
                       Content="@Content"
                       IsToggle="true"
                       OnClick="@OnPidControllerEnableChange">
            </EjsButton>
        </div>
        @if (ComponentId == ComponentId.MT) {
            <div class="col-2">
                <EjsSwitch @ref="PidControllerModeSwitch"
                           CssClass="tempPercSwitch" 
                           OffLabel="TEMPERATURE" 
                           OnLabel="PERCENTAGE"
                           ValueChange="@OnPidControllerModeChange"
                           >

                </EjsSwitch>
            </div>
        }
        <div class="@(ComponentId == ComponentId.MT ? "col-8" : "col-10")">

            <EjsSlider @ref="SetPointSlider"
                       Orientation="@SliderOrientation.Horizontal"
                       Type=SliderType.MinRange
                       Value="SetPoint"
                       Min="@LowPoint" Max="@HighPoint">
                <SliderTooltipData IsVisible="true" Placement="TooltipPlacement.Before" ShowOn="TooltipShowOn.Always" />
                <SliderTicksData Placement="Placement.After"
                                 ShowSmallTicks="false"
                                 LargeStep="10"
                                 SmallStep="1" />
                <SliderEvents TValue="int"
                              ValueChange="@SetPoint_ValueChange" />

            </EjsSlider>

        </div>

        <div class="col-1">
            <h2>
                <span class="badge badge-pill badge-primary">
                    @SetPoint
                </span>
            </h2>
        </div>
    </div>
</div>

<style>

    .e-switch-wrapper.tempPercSwitch {
      width: 120px;
    }

</style>

@code {



    private const string Start = "Start";
    private const string Stop = "Stop";

    public string Content { get; set; } = Start;

    public int SetPoint { get; set; } = 60;

    public int LowPoint { get; set; } = 40;

    public int HighPoint { get; set; } = 212;

    public EjsSlider<int> SetPointSlider { get; set; }

    public EjsButton PidControllerEnableButton { get; set; }

    public EjsSwitch PidControllerModeSwitch { get; set; }


    public override void Initialize() {
        EventHandler.SubscribeToComponentStateChange<PidControllerState>(PidControllerStateChangeOccured,
                                                                            ComponentId);
    }

    public void OnPidControllerEnableChange() {
        Content = (PidControllerEnableButton.Content == Start) ? Stop : Start;

        EventHandler.ComponentStateRequestFiring(new ComponentStateRequest<PidControllerRequestState> {
            RequestState = new PidControllerRequestState {
                Id = ComponentId,
                IsEngaged = (Content == Stop)
            }
        });
    }

    public void OnPidControllerModeChange(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args) {

        EventHandler.ComponentStateRequestFiring(new ComponentStateRequest<PidControllerRequestState> {
            RequestState = new PidControllerRequestState {
                Id = ComponentId,
                PidMode = args.Checked ? PidMode.Percentage : PidMode.Temperature
            }
        });


        var nutz = PidControllerModeSwitch?.Value;
    }

    public void PidControllerStateChangeOccured(ComponentStateChange<PidControllerState> componentStateChange) {

        Content = (componentStateChange.CurrentState.IsEngaged) ? Stop : Start;

        if (ComponentId == ComponentId.MT) {
            LowPoint = componentStateChange.CurrentState.PidMode == PidMode.Temperature ? 40 : 0;
            HighPoint = componentStateChange.CurrentState.PidMode == PidMode.Temperature ? 212 : 100;

            var something = PidControllerModeSwitch?.Value;
        }

        //if (componentStateChange.CurrentState.)

        if (SetPoint != (int)componentStateChange.CurrentState.SetPoint) {
            RepeatUntilComplete(() => {
                SetPoint = (int)componentStateChange.CurrentState.SetPoint;
                return SetPointSlider.Value == (int)componentStateChange.CurrentState.SetPoint;
            });
        }
    }

    private void SetPoint_ValueChange(SliderChangeEventArgs<int> eventArgs) {
        if (SetPoint != eventArgs.Value) {
            SetPoint = eventArgs.Value;

            EventHandler.ComponentStateRequestFiring(new ComponentStateRequest<PidControllerRequestState> {
                RequestState = new PidControllerRequestState {
                    Id = ComponentId,
                    SetPoint = eventArgs.Value
                }
            });
        }
    }

}
