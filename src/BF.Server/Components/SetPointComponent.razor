@inherits BFComponent;

@using Syncfusion.EJ2.Blazor.Inputs
@using BF.Common.Events
@using BF.Common.States

<div class="container">
    <div class="row justify-content-center">
        <div class="col-6">
            <h2>
                <span class="badge badge-pill badge-primary">
                    @SetPoint
                </span>
            </h2>
        </div>
    </div>
    <div class="row justify-content-center h-75">
        <div class="col-3">
            <div class="content-wrapper" style="background-color:green;">
                <EjsSlider @ref="Slider"
                            Orientation="@SliderOrientation.Vertical"
                            Type=SliderType.MinRange
                            Value="SetPoint"
                            Min="40" Max="212">
                    <SliderTooltipData IsVisible="true" Placement="TooltipPlacement.Before" ShowOn="TooltipShowOn.Always" />
                    <SliderTicksData Placement="Placement.After"
                                        ShowSmallTicks="false"
                                        LargeStep="10"
                                        SmallStep="1" />
                    <SliderEvents TValue="int"
                                    ValueChange="@SetPoint_ValueChange" />

                </EjsSlider>
            </div>
        </div>
    </div>
</div>

@code {

    public int SetPoint { get; set; } = 60;

    public EjsSlider<int> Slider { get; set; }

    public override void Initialize() {
        EventHandler.SubscribeToComponentStateChange<PidControllerState>(PidControllerStateChangeOccured,
                                                                            ComponentId);
    }

    public void PidControllerStateChangeOccured(ComponentStateChange<PidControllerState> componentStateChange) {
        if (SetPoint != (int)componentStateChange.CurrentState.SetPoint) {
            RepeatUntilComplete(() => {
                SetPoint = (int)componentStateChange.CurrentState.SetPoint;
                return Slider.Value == (int)componentStateChange.CurrentState.SetPoint;
            });
        }
    }

    private void SetPoint_ValueChange(SliderChangeEventArgs<int> eventArgs) {
        if (SetPoint != eventArgs.Value) {
            SetPoint = eventArgs.Value;

            EventHandler.ComponentStateRequestFiring(new ComponentStateRequest<PidControllerRequestState> {
                RequestState = new PidControllerRequestState {
                    Id = ComponentId,
                    SetPoint = eventArgs.Value
                }
            });
        }
    }

}
