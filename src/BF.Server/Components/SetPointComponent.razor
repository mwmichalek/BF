@inherits BFComponent;

@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.CircularGauge
@using Syncfusion.EJ2.Blazor.Inputs
@using BF.Service.Events
@using BF.Common.Events
@using BF.Common.Components
@using BF.Common.States
@using Microsoft.Extensions.Logging
@using System.Threading

<h2>[ @SetPoint ]</h2>

<div class="content-wrapper" style="height: 100%;">


    <EjsSlider @ref="Slider"
               Orientation="@SliderOrientation.Vertical"
               Type=SliderType.MinRange
               Value="SetPoint"
               Min="40" Max="212">
        <SliderTooltipData IsVisible="true" Placement="TooltipPlacement.Before" ShowOn="TooltipShowOn.Always" />
        <SliderTicksData Placement="Placement.After"
                         ShowSmallTicks="false"
                         LargeStep="10"
                         SmallStep="1" />
        <SliderEvents TValue="int"
                      ValueChange="@SetPoint_ValueChange" />

    </EjsSlider>
</div>

@code {

    [Parameter]
    public ComponentId ComponentId { get; set; }

    [Inject]
    IBeerFactoryEventHandler _eventHandler { get; set; }

    [Inject]
    ILoggerFactory _loggerFactory { get; set; }

    private ILogger _logger;

    public int SetPoint { get; set; } = 60;

    public EjsSlider<int> Slider { get; set; }

    private bool _isInitialized = false;

    protected override async Task OnInitializedAsync() {
        _logger = _loggerFactory.CreateLogger("SetPointComponent");

    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            Setup();
            //    _isInitialized = true;
        }
    }

    protected override void OnParametersSet() {
        //if (_isInitialized)
        //    Setup();
    }

    private void Setup() {
        _eventHandler.ComponentStateChangeOccured<PidControllerState>(PidControllerStateChangeOccured,
                                                                      ComponentId,
                                                                      ThreadType.UIThread);
    }

    public void PidControllerStateChangeOccured(ComponentStateChange<PidControllerState> componentStateChange) {
        if (SetPoint != (int)componentStateChange.CurrentState.SetPoint) {
            Task.Run(() => {
                while (Slider.Value != (int)componentStateChange.CurrentState.SetPoint) {
                    SetPoint = (int)componentStateChange.CurrentState.SetPoint;
                    InvokeAsync(() => StateHasChanged());
                    if (Slider.Value != (int)componentStateChange.CurrentState.SetPoint) Thread.Sleep(50);
                } 
            });

            //Motherfucker(out SetPoint, (int)componentStateChange.CurrentState.SetPoint, () => Slider.Value);
        }
    }

    void SetPoint_ValueChange(SliderChangeEventArgs<int> eventArgs) {
        if (SetPoint != eventArgs.Value) {
            SetPoint = eventArgs.Value;

            _eventHandler.ComponentStateRequestFiring(new ComponentStateRequest<PidControllerRequestState> {
                RequestState = new PidControllerRequestState {
                    Id = ComponentId.HLT,
                    SetPoint = eventArgs.Value
                }
            });
        }
    }

}
