@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.CircularGauge
@using Syncfusion.EJ2.Blazor.Inputs
@using BF.Service.Events
@using BF.Common.Events
@using BF.Common.Components

<div class="content-wrapper" style="height: 100%;">
    <EjsSlider Orientation="@SliderOrientation.Vertical"
                Type=SliderType.MinRange
                Value="@SetPoint"
                Min="40" Max="212">
        <SliderTooltipData IsVisible="true" Placement="TooltipPlacement.Before" ShowOn="TooltipShowOn.Always" />
        <SliderTicksData Placement="Placement.After"
                            ShowSmallTicks="false"
                            LargeStep="10"
                            SmallStep="1" />
        <SliderEvents TValue="int"
                        OnChange="@SetPointChange" />

    </EjsSlider>
</div>

@code {

    [Parameter]
    public ComponentId ComponentId { get; set; }



    [Inject]
    IBeerFactoryEventHandler _beerFactoryEventHandler { get; set; }

    public int SetPoint { get; set; }

    protected override async Task OnInitializedAsync() {
        _beerFactoryEventHandler.ConnectionStatusChangeOccured(ConnectionStatusChangeOccured);
    }


    void ConnectionStatusChangeOccured(ConnectionStatusChange connectionStatusChange) {

        var pid = connectionStatusChange.PidChanges.SingleOrDefault(p => p.Id == ComponentId);
        if (pid != null) {
            SetPoint = (int)pid.SetPoint;
            InvokeAsync(() => StateHasChanged());
        }
    }

    void SetPointChange(SliderChangeEventArgs<int> eventArgs) {
        SetPoint = eventArgs.Value;

        var pidRequest = new PidRequest {
            Id = ComponentId,
            IsEngaged = true,
            PidMode = PidMode.Temperature,
            SetPoint = eventArgs.Value
        };

        _beerFactoryEventHandler.PidRequestFired(pidRequest);
    }

}
