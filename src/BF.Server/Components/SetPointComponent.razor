@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.CircularGauge
@using Syncfusion.EJ2.Blazor.Inputs
@using BF.Service.Events
@using BF.Common.Events
@using BF.Common.Components
@using BF.Common.States

<div class="content-wrapper" style="height: 100%;">
    <h2>[ @SetPoint ]</h2>

    <EjsSlider Orientation="@SliderOrientation.Vertical"
                Type=SliderType.MinRange
                Value="@SetPoint"
                Min="40" Max="212">
        <SliderTooltipData IsVisible="true" Placement="TooltipPlacement.Before" ShowOn="TooltipShowOn.Always" />
        <SliderTicksData Placement="Placement.After"
                            ShowSmallTicks="false"
                            LargeStep="10"
                            SmallStep="1" />
        <SliderEvents TValue="int"
                        OnChange="@SetPointChange" />

    </EjsSlider>


</div>



@code {

    [Parameter]
    public ComponentId ComponentId { get; set; }

    [Inject]
    IBeerFactoryEventHandler _eventHandler { get; set; }

    public double SetPoint { get; set; } = 60;

    protected override async Task OnInitializedAsync() {
        _eventHandler.ComponentStateChangeOccured<PidControllerState>(PidControllerStateChangeOccured);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            var pidControllerState = (PidControllerState)_eventHandler.CurrentComponentState<PidControllerState>(ComponentId);
            SetPoint = pidControllerState.SetPoint;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    public void PidControllerStateChangeOccured(ComponentStateChange<PidControllerState> componentStateChange) {
        if (componentStateChange.Id == ComponentId && 
            SetPoint != componentStateChange.CurrentState.SetPoint) {
            SetPoint = componentStateChange.CurrentState.SetPoint;
            InvokeAsync(() => StateHasChanged());
        }
    }

    void SetPointChange(SliderChangeEventArgs<int> eventArgs) {
        //SetPoint = eventArgs.Value;

        _eventHandler.ComponentStateRequestFiring(new ComponentStateRequest<PidControllerState> {
            Id = ComponentId.HLT,
            RequestState = new PidControllerState {
                SetPoint = eventArgs.Value
            }
        });

    }

}
