@inherits BFComponent;

@using Syncfusion.EJ2.Blazor.CircularGauge
@using BF.Common.Events
@using BF.Common.States

<EjsCircularGauge>
    <CircularGaugeAxes>
        <CircularGaugeAxis>
            <CircularGaugeAxisLabelStyle Position="Position.Outside" AutoAngle="true">
                <CircularGaugeAxisLabelFont Size="10px">
                </CircularGaugeAxisLabelFont>
            </CircularGaugeAxisLabelStyle>
            <CircularGaugeAxisMajorTicks Position="Position.Outside">
            </CircularGaugeAxisMajorTicks>
            <CircularGaugeAxisMinorTicks Position="Position.Outside">
            </CircularGaugeAxisMinorTicks>
            <CircularGaugePointers>
                <CircularGaugePointer @ref="PercentageGaugePointer"
                                      Value="@Percentage"
                                      Type="PointerType.RangeBar"
                                      PointerWidth="20"
                                      Radius="95%"
                                      Color="#F00">
                    <CircularGaugePointerBorder Color="black"
                                                Width="2">
                    </CircularGaugePointerBorder>
                </CircularGaugePointer>
            </CircularGaugePointers>
            <CircularGaugeAnnotations>
                <CircularGaugeAnnotation Angle="180"
                                         Radius="35%"
                                         ZIndex="1">
                    <ContentTemplate>
                        <div style="width:150px;margin:auto auto; margin-left:-65px; font-size: 40px; text-align:center;">@Percentage%</div>
                    </ContentTemplate>
                </CircularGaugeAnnotation>
            </CircularGaugeAnnotations>
        </CircularGaugeAxis>
    </CircularGaugeAxes>
</EjsCircularGauge>

@code {

    public CircularGaugePointer PercentageGaugePointer { get; set; }

    public int Percentage { get; set; }

    public override void Initialize() {
        EventHandler.SubscribeToComponentStateChange<SsrState>(SsrStateChangeOccured,
                                                               ComponentId);
    }

    private void SsrStateChangeOccured(ComponentStateChange<SsrState> ssrStateChange) {
        //if (Percentage != ssrStateChange.CurrentState.Percentage) {
            //RepeatUntilComplete(() => {
            //    Percentage = ssrStateChange.CurrentState.Percentage;
            //    return PercentageGaugePointer.Value == (int)ssrStateChange.CurrentState.Percentage;
            //});

            InvokeAsync(() => {
                Percentage = ssrStateChange.CurrentState.Percentage;
                StateHasChanged();
            });
        //}
    }

}
