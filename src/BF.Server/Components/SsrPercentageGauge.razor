@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.CircularGauge
@using BF.Service.Events
@using BF.Common.Events
@using BF.Common.Components

<EjsCircularGauge>
    <CircularGaugeAxes>
        <CircularGaugeAxis>
            <CircularGaugeAxisLabelStyle Position="Position.Outside" AutoAngle="true">
                <CircularGaugeAxisLabelFont Size="10px">
                </CircularGaugeAxisLabelFont>
            </CircularGaugeAxisLabelStyle>
            <CircularGaugeAxisMajorTicks Position="Position.Outside">
            </CircularGaugeAxisMajorTicks>
            <CircularGaugeAxisMinorTicks Position="Position.Outside">
            </CircularGaugeAxisMinorTicks>
            <CircularGaugePointers>
                <CircularGaugePointer Value="@Percentage"
                                      Type="PointerType.RangeBar"
                                      PointerWidth="20"
                                      Radius="95%"
                                      Color="#5cb85c">
                    <CircularGaugePointerBorder Color="black"
                                                Width="2">
                    </CircularGaugePointerBorder>
                </CircularGaugePointer>
            </CircularGaugePointers>
            <CircularGaugeAnnotations>
                <CircularGaugeAnnotation Angle="180"
                                         Radius="35%"
                                         ZIndex="1">
                    <ContentTemplate>
                        <div style="width:150px;margin:auto auto; margin-left:-65px; font-size: 40px; text-align:center;">@Percentage%</div>
                    </ContentTemplate>
                </CircularGaugeAnnotation>
            </CircularGaugeAnnotations>
        </CircularGaugeAxis>
    </CircularGaugeAxes>
</EjsCircularGauge>

@code {

    [Parameter]
    public ComponentId ComponentId { get; set; }

    [Inject]
    IBeerFactoryEventHandler _beerFactoryEventHandler { get; set; }

    public double Percentage;

    protected override async Task OnInitializedAsync() {
        _beerFactoryEventHandler.SsrChangeOccured(SsrChangeOccured);
    }

    void SsrChangeOccured(SsrChange ssrChange) {
        if (ssrChange.Id == ComponentId) {
            Percentage = ssrChange.Percentage;
            InvokeAsync(() => StateHasChanged());
        }
    }

}


