@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.CircularGauge
@using BF.Service.Events
@using BF.Common.Events
@using BF.Common.Components
@using BF.Common.States
@using System.Threading
@using Microsoft.Extensions.Logging

<EjsCircularGauge>
    <CircularGaugeAxes>
        <CircularGaugeAxis>
            <CircularGaugeAxisLabelStyle Position="Position.Outside" AutoAngle="true">
                <CircularGaugeAxisLabelFont Size="10px">
                </CircularGaugeAxisLabelFont>
            </CircularGaugeAxisLabelStyle>
            <CircularGaugeAxisMajorTicks Position="Position.Outside">
            </CircularGaugeAxisMajorTicks>
            <CircularGaugeAxisMinorTicks Position="Position.Outside">
            </CircularGaugeAxisMinorTicks>
            <CircularGaugePointers>
                <CircularGaugePointer @ref="CircularGauge"
                                      Value="@Percentage"
                                      Type="PointerType.RangeBar"
                                      PointerWidth="20"
                                      Radius="95%"
                                      Color="#F00">
                    <CircularGaugePointerBorder Color="black"
                                                Width="2">
                    </CircularGaugePointerBorder>
                </CircularGaugePointer>
            </CircularGaugePointers>
            <CircularGaugeAnnotations>
                <CircularGaugeAnnotation Angle="180"
                                         Radius="35%"
                                         ZIndex="1">
                    <ContentTemplate>
                        <div style="width:150px;margin:auto auto; margin-left:-65px; font-size: 40px; text-align:center;">@Percentage%</div>
                    </ContentTemplate>
                </CircularGaugeAnnotation>
            </CircularGaugeAnnotations>
        </CircularGaugeAxis>
    </CircularGaugeAxes>
</EjsCircularGauge>

@code {

    [Parameter]
    public ComponentId ComponentId { get; set; }

    [Inject]
    IBeerFactoryEventHandler _eventHandler { get; set; }

    [Inject]
    ILoggerFactory _loggerFactory { get; set; }

    private ILogger _logger;

    public CircularGaugePointer CircularGauge { get; set; }

    public int Percentage { get; set; }

    protected override async Task OnInitializedAsync() {
        _logger = _loggerFactory.CreateLogger("SsrPercentageGauge");
        _eventHandler.SubscribeToComponentStateChange<SsrState>(SsrStateChangeOccured);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            var ssrState = (SsrState)_eventHandler.CurrentComponentState<SsrState>(ComponentId);
            if (ssrState != null &&
                Percentage != ssrState.Percentage) {
                await Task.Run(() => {
                    do {
                        _logger.LogInformation($" Value: {CircularGauge.Value}");
                        Percentage = ssrState.Percentage;
                        InvokeAsync(() => StateHasChanged());
                        Thread.Sleep(1000);
                    } while (CircularGauge.Value != Percentage);
                    _logger.LogInformation($" Value: {CircularGauge.Value}");
                });
            }
        }
    }

    void SsrStateChangeOccured(ComponentStateChange<SsrState> ssrStateChange) {
        if (ssrStateChange.Id == ComponentId) {
            Percentage = ssrStateChange.CurrentState.Percentage;
            InvokeAsync(() => StateHasChanged());
        }
    }
}
