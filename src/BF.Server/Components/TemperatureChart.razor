@inherits BFComponent;

@using Syncfusion.EJ2.Blazor.Charts
@using BF.Common.Events
@using BF.Common.States
@using System.Collections.ObjectModel

<div class="content-wrapper" style="height: 100%;">

    <EjsChart @ref="Chart"
              Title="Temperature">
        @*<ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
            <ChartPrimaryXAxis ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.DateTime"
                               LabelFormat="y"
                               IntervalType="IntervalType.Seconds"
                               EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis LabelFormat="{value}%"
                               RangePadding="ChartRangePadding.None"
                               Minimum="0"
                               Maximum="100"
                               Interval="20">
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            </ChartPrimaryYAxis>
            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>*@
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ThermometerStateChanges" Name="Temperature" XName="Timestamp" Width="2"
                         Opacity="1" YName="Temperature" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Width="10" Height="10">
                </ChartMarker>
            </ChartSeries>

        </ChartSeriesCollection>
    </EjsChart>

</div>



@code {

    public EjsChart Chart { get; set; }

    public ObservableCollection<ThermometerState> ThermometerStateChanges = new ObservableCollection<ThermometerState>();

    public override void Initialize() {
        EventHandler.SubscribeToComponentStateChange<ThermometerState>(ThermometerStateChangeOccured,
                                                                       ComponentId);
    }

    public void ThermometerStateChangeOccured(ComponentStateChange<ThermometerState> componentStateChange) {

        InvokeAsync(() => {
            while (ThermometerStateChanges.Count > 20)
                ThermometerStateChanges.RemoveAt(0);

            ThermometerStateChanges.Add(componentStateChange.CurrentState);
            StateHasChanged();
        });
    }

}
