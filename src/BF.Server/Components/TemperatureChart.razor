@inherits BFComponent;

@using Syncfusion.EJ2.Blazor.Charts
@using BF.Common.Events
@using BF.Common.States
@using BF.Common.Components
@using System.Collections.ObjectModel
@using System.Collections.Generic
@using System.Linq
@using Microsoft.Extensions.Logging

<div class="content-wrapper" style="height: 100%;">

    <EjsChart @ref="Chart"
              Title="Temperature">

        <ChartPrimaryXAxis LabelFormat="hh:mm.ss"
                           ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.DateTime"
                           EdgeLabelPlacement="EdgeLabelPlacement.Shift">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ThermometerStateChanges" Name="Temperature" XName="Timestamp" Width="2"
                         Opacity="1" YName="Temperature" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Width="10" Height="10">
                </ChartMarker>
            </ChartSeries>

        </ChartSeriesCollection>
    </EjsChart>

</div>



@code {

    public EjsChart Chart { get; set; }

    public ObservableCollection<ThermometerState> ThermometerStateChanges = new ObservableCollection<ThermometerState>();

    public Dictionary<ComponentId, ObservableCollection<ThermometerState>> ThermometerStateChangesLookup = new Dictionary<ComponentId, ObservableCollection<ThermometerState>>() {
        { ComponentId.HLT, new ObservableCollection<ThermometerState>() },
        { ComponentId.MT, new ObservableCollection<ThermometerState>() },
        { ComponentId.BK, new ObservableCollection<ThermometerState>() },
    };


    public override void Initialize() {

        if (!IsInitialized) {
            Logger = LoggerFactory.CreateLogger("TemperatureChart");
            EventHandler.SubscribeToComponentStateChange<ThermometerState>(ThermometerStateChangeOccured);
        }

        ThermometerStateChanges.Clear();
        foreach (var state in ThermometerStateChangesLookup[ComponentId])
            ThermometerStateChanges.Add(state);
    }

    public void ThermometerStateChangeOccured(ComponentStateChange<ThermometerState> componentStateChange) {

        InvokeAsync(() => {
            RemoveOldStatesAndAddNew(ThermometerStateChangesLookup[componentStateChange.Id], componentStateChange.CurrentState);

            if (componentStateChange.Id == ComponentId) {
                RemoveOldStatesAndAddNew(ThermometerStateChanges, componentStateChange.CurrentState);
                StateHasChanged();
            }
        });
    }

    private void RemoveOldStatesAndAddNew(ObservableCollection<ThermometerState> collection, ThermometerState currentState) {
        while (collection.Count > 20)
            collection.RemoveAt(0);
        collection.Add(currentState);
    }

}
