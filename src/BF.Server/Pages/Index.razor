@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BF.Common.Events
@using BF.Common.Ids
@using Newtonsoft.Json
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Layouts
@using Syncfusion.EJ2.Blazor.CircularGauge

<h1>Hello, world!</h1>

This app sucks.
<br />

<EjsDashboardLayout CellSpacing="@(new double[]{10 ,10 })" CellAspectRatio="1" Columns="7">
    <DashboardLayoutPanels>
        <DashboardLayoutPanel Col="0" SizeX="3">
            <ContentTemplate>

                <EjsCircularGauge>
                    <CircularGaugeAxes>
                        <CircularGaugeAxis>
                            <CircularGaugePointers>
                                <CircularGaugePointer Value="@Temperature">
                                </CircularGaugePointer>
                            </CircularGaugePointers>
                        </CircularGaugeAxis>
                    </CircularGaugeAxes>
                </EjsCircularGauge>

            </ContentTemplate>
        </DashboardLayoutPanel>



        <DashboardLayoutPanel Col="3" SizeX="3">
            <ContentTemplate>
                asdfasf
            </ContentTemplate>
        </DashboardLayoutPanel>

        <DashboardLayoutPanel Col="0" Row="1" SizeX="3">
            <ContentTemplate>
                USER:
                <input placeholder="Type User's Name" @bind="User" />
                <br />
                MESSAGE:
                <input placeholder="Type Message" @bind="Message" />
                <br />
                <button @onclick="SendMessage">SEND</button>
                <br />
            </ContentTemplate>
        </DashboardLayoutPanel>

        <DashboardLayoutPanel Col="3" Row="1" SizeX="3">
            <ContentTemplate>
                @foreach (var message in messages) {
                    @message<br />
                }
            </ContentTemplate>
        </DashboardLayoutPanel>

        @*<DashboardLayoutPanel SizeY=2 Col=3>
                <ContentTemplate><div>2</div></ContentTemplate>
            </DashboardLayoutPanel>
            <DashboardLayoutPanel Row=1>
                <ContentTemplate><div>3</div></ContentTemplate>
            </DashboardLayoutPanel>*@
    </DashboardLayoutPanels>
</EjsDashboardLayout>






@code {

    [Inject]
    HubConnectionBuilder _hubConnectionBuilder { get; set; }
    HubConnection connection;
    string User = "";
    string Message = "";
    double Temperature = 50;

    IList<string> messages = new List<string>();

    protected override async Task OnInitializedAsync() {
        //connection = _hubConnectionBuilder.WithUrl("https://localhost:44355/bfHub").Build();
        connection = _hubConnectionBuilder.WithUrl("https://emrsd-ws-bf.azurewebsites.net/bfHub").Build();

        connection.On<string, string>("ReceiveMessage", OnReceiveMessage);

        connection.On<string>("TemperatureChangeOccured", TemperatureChangeOccured);
        connection.On<string>("PumpChangeOccured", PumpChangeOccured);
        connection.On<string>("PidChangeOccured", PidChangeOccured);
        connection.On<string>("SsrChangeOccured", SsrChangeOccured);
        connection.On<string>("ConnectionStatusChangeOccured", ConnectionStatusChangeOccured);

        await connection.StartAsync();
    }



    Task TemperatureChangeOccured(string temperatureChangeJson) {
        var temperatureChange = JsonConvert.DeserializeObject<TemperatureChange>(temperatureChangeJson);
        messages.Insert(0, $"TEMP: {temperatureChange.Id} - {temperatureChange.Value} {temperatureChange.PercentChange.ToString("#.00")}");


        if (temperatureChange.Id == ThermometerId.HLT) {
            Temperature = (double) temperatureChange.Value;
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    Task PumpChangeOccured(string pumpChangeJson) {
        var pumpChange = JsonConvert.DeserializeObject<PumpChange>(pumpChangeJson);
        messages.Insert(0, $"PUMP: {pumpChange.Id} - {pumpChange.IsEngaged}");
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task PidChangeOccured(string pidChangeJson) {
        var pidChange = JsonConvert.DeserializeObject<PidChange>(pidChangeJson);
        messages.Insert(0, $"PID: {pidChange.Id} - {pidChange.IsEngaged} {pidChange.SetPoint}");
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task SsrChangeOccured(string ssrChangeJson) {
        var ssrChange = JsonConvert.DeserializeObject<SsrChange>(ssrChangeJson);
        messages.Insert(0, $"SSR: {ssrChange.Id} - {ssrChange.IsEngaged} {ssrChange.Percentage}");
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task ConnectionStatusChangeOccured(string connectionStatusChangeJson) {
        var connectionStatusChange = JsonConvert.DeserializeObject<ConnectionStatusChange>(connectionStatusChangeJson);
        messages.Insert(0, $"CONNECTION: {connectionStatusChange.ConnectionState}");
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task SendMessage() {
        await connection.InvokeAsync("SendMessage", User, Message);
    }

    Task OnReceiveMessage(string name, string message) {
        messages.Add(name + " : " + message);
        StateHasChanged();
        return Task.CompletedTask;
    }
}





