@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BF.Common.Events
@using BF.Common.Components
@using Newtonsoft.Json
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Layouts
@using Syncfusion.EJ2.Blazor.CircularGauge
@using System.Net.Http;
@using System.Security.Cryptography.X509Certificates;
@using System.Net.Security;
@using Syncfusion.EJ2.Blazor.Buttons
@using Syncfusion.EJ2.Blazor.Inputs
@using Syncfusion.EJ2.Blazor.Lists
@using BF.Service.Events
@using BF.Services.Components
@using BF.Server.Components

    <div class="container">
        <div class="row">
            <div class="col-9">
                <div class="row">
                    <div class="col-12">

                        <TemperatureGauge ComponentId="@ComponentId.HLT" />



                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <SsrPercentageGauge ComponentId="ComponentId.HLT" />
                    </div>
                </div>
            </div>
            <div class="col-3">
                <SetPointComponent ComponentId="ComponentId.HLT" />
            </div>
        </div>
        @*<div class="row">
            <div class="col-9">
                <EventLogger />
            </div>
            <div class="col-3">
                <PumpButton />
            </div>

        </div>*@
        <div class="row">
            <div class="col-12">
                <TemperatureChart  ComponentId="ComponentId.HLT" />
            </div>
        </div>
    </div>


@code {

    [Inject]
    IBeerFactoryEventHandler _beerFactoryEventHandler { get; set; }

    string User = "";
    string Message = "";

    protected override async Task OnInitializedAsync() {
    }

    async Task SendMessage() {
        //await connection.InvokeAsync("SendMessage", User, Message);
    }

}