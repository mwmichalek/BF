@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BF.Common.Events
@using BF.Common.Ids
@using Newtonsoft.Json

<h1>Hello, world!</h1>

This app sucks.<br />


USER:
<input placeholder="Type User's Name" @bind="User" /><br />
MESSAGE:
<input placeholder="Type Message" @bind="Message" /><br />
<button @onclick="SendMessage">SEND</button><br/>

@foreach (var message in messages) {
    @message
    <br />
}

@code {

    [Inject]
    HubConnectionBuilder _hubConnectionBuilder { get; set; }
    HubConnection connection;
    string User = "";
    string Message = "";
    IList<string> messages = new List<string>();

    protected override async Task OnInitializedAsync() {
        //connection = _hubConnectionBuilder.WithUrl("https://localhost:44355/bfHub").Build();
        connection = _hubConnectionBuilder.WithUrl("https://emrsd-ws-bf.azurewebsites.net/bfHub").Build();

        connection.On<string, string>("ReceiveMessage", OnReceiveMessage);

        connection.On<string>("TemperatureChangeOccured", TemperatureChangeOccured);
        connection.On<string>("PumpChangeOccured", PumpChangeOccured);
        connection.On<string>("PidChangeOccured", PidChangeOccured);
        connection.On<string>("SsrChangeOccured", SsrChangeOccured);
        connection.On<string>("ConnectionStatusChangeOccured", ConnectionStatusChangeOccured);

        await connection.StartAsync();
    }



    Task TemperatureChangeOccured(string temperatureChangeJson) {
        var temperatureChange = JsonConvert.DeserializeObject<TemperatureChange>(temperatureChangeJson);
        messages.Insert(0, $"TEMP: {temperatureChange.Id} - {temperatureChange.Value} {temperatureChange.PercentChange}");
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task PumpChangeOccured(string pumpChangeJson) {
        var pumpChange = JsonConvert.DeserializeObject<PumpChange>(pumpChangeJson);
        messages.Insert(0, $"PUMP: {pumpChange.Id} - {pumpChange.IsEngaged}");
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task PidChangeOccured(string pidChangeJson) {
        var pidChange = JsonConvert.DeserializeObject<PidChange>(pidChangeJson);
        messages.Insert(0, $"PID: {pidChange.Id} - {pidChange.IsEngaged} {pidChange.SetPoint}");
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task SsrChangeOccured(string ssrChangeJson) {
        var ssrChange = JsonConvert.DeserializeObject<SsrChange>(ssrChangeJson);
        messages.Insert(0, $"SSR: {ssrChange.Id} - {ssrChange.IsEngaged} {ssrChange.Percentage}");
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task ConnectionStatusChangeOccured(string connectionStatusChangeJson) {
        var connectionStatusChange = JsonConvert.DeserializeObject<ConnectionStatusChange>(connectionStatusChangeJson);
        messages.Insert(0, $"CONNECTION: {connectionStatusChange.ConnectionState}");
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task SendMessage() {
        await connection.InvokeAsync("SendMessage", User, Message);
    }

        Task OnReceiveMessage(string name, string message) {
        messages.Add(name + " : " + message);
        StateHasChanged();
        return Task.CompletedTask;
    }
}





