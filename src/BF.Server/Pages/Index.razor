@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BF.Common.Events
@using BF.Common.Ids
@using Newtonsoft.Json
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Layouts
@using Syncfusion.EJ2.Blazor.CircularGauge
@using System.Net.Http;
@using System.Security.Cryptography.X509Certificates;
@using System.Net.Security;
@using Syncfusion.EJ2.Blazor.Buttons
@using Syncfusion.EJ2.Blazor.Inputs
@using Syncfusion.EJ2.Blazor.Lists
@using BF.Service.Events
@using BF.Service.Components

<EjsDashboardLayout CellSpacing="@(new double[]{10 ,10 })" CellAspectRatio="1" Columns="7" AllowDragging="false" AllowResizing="false">
    <DashboardLayoutPanels>

        <DashboardLayoutPanel Col="0" SizeX="3">
            <HeaderTemplate><div>Temperature</div></HeaderTemplate>
            <ContentTemplate>
                <div class="control-section">
                    <div class="content-wrapper">
                        <EjsCircularGauge Width="200" Height="200">
                            <CircularGaugeAxes>
                                <CircularGaugeAxis Minimum="20" Maximum="220" StartAngle="240" EndAngle="120" Radius="90%">
                                    <CircularGaugePointers>
                                        <CircularGaugePointer Value="@Temperature">
                                        </CircularGaugePointer>
                                    </CircularGaugePointers>
                                    <CircularGaugeRanges>
                                        <CircularGaugeRange Start="20" End="32" Color="Blue" />
                                        <CircularGaugeRange Start="212" End="220" Color="Red" />
                                    </CircularGaugeRanges>
                                </CircularGaugeAxis>
                            </CircularGaugeAxes>
                        </EjsCircularGauge>
                    </div>
                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>



        <DashboardLayoutPanel Col="3" SizeX="3">
            <ContentTemplate>
                <div class="control-section">
                    <div class="content-wrapper">
                        <EjsSlider Value="30"></EjsSlider>
                    </div>
                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>

        <DashboardLayoutPanel Col="0" Row="1" SizeX="3">
            <ContentTemplate>
                <EjsTextBox FloatLabelType='@FloatLabelType.Auto' Placeholder="UserName" Value="@User"></EjsTextBox>
                <br />

                <EjsTextBox FloatLabelType='@FloatLabelType.Auto' Placeholder="Message" Value="@Message"></EjsTextBox>
                <br />

                <EjsButton CssClass="e-primary" @onclick="SendMessage">SEND</EjsButton>
                <br />
            </ContentTemplate>
        </DashboardLayoutPanel>

        <DashboardLayoutPanel Col="3" Row="1" SizeX="3">
            <ContentTemplate>

                <div class="control-section">
                    <div class="content-wrapper">
                        <EjsListView DataSource="@Messages"></EjsListView>
                    </div>
                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>

        @*<DashboardLayoutPanel SizeY=2 Col=3>
                <ContentTemplate><div>2</div></ContentTemplate>
            </DashboardLayoutPanel>
            <DashboardLayoutPanel Row=1>
                <ContentTemplate><div>3</div></ContentTemplate>
            </DashboardLayoutPanel>*@
    </DashboardLayoutPanels>
</EjsDashboardLayout>

@foreach (var msg in Messages) {
    @msg
    <br />
}

<style>
    .content-wrapper {
        width: 40%;
        margin: auto auto;
        min-width: 185px;
    }

    .sliderwrap {
        margin-top: 40px;
    }

    .e-bigger .content-wrapper {
        width: 80%;
    }

    .sliderwrap label {
        padding-bottom: 26px;
        font-size: 13px;
        font-weight: 500;
        margin-top: 15px;
    }

    .userselect {
        -webkit-user-select: none; /* Safari 3.1+ */
        -moz-user-select: none; /* Firefox 2+ */
        -ms-user-select: none; /* IE 10+ */
        user-select: none; /* Standard syntax */
    }
</style>

@code {

    [Inject]
    HubConnectionBuilder _hubConnectionBuilder { get; set; }

    [Inject]
    IBeerFactoryEventHandler _beerFactoryEventHandler { get; set; }


    HubConnection connection;
    string User = "";
    string Message = "";
    double Temperature = 70;
    int SetPoint = 70;

    IList<string> Messages = new List<string>();

    protected override async Task OnInitializedAsync() {
        connection = _hubConnectionBuilder
            .WithUrl("https://localhost:44355/bfHub", options => {
                options.HttpMessageHandlerFactory = (handler) => {
                    if (handler is HttpClientHandler clientHandler) {
                        clientHandler.ServerCertificateCustomValidationCallback = ValidateCertificate;
                    }
                    return handler;
                };
            }).Build();



        //connection = _hubConnectionBuilder.WithUrl("https://emrsd-ws-bf.azurewebsites.net/bfHub").Build();

        connection.On<string, string>("ReceiveMessage", OnReceiveMessage);

        connection.On<string>("TemperatureChangeOccured", TemperatureChangeOccured);
        connection.On<string>("PumpChangeOccured", PumpChangeOccured);
        connection.On<string>("PidChangeOccured", PidChangeOccured);
        connection.On<string>("SsrChangeOccured", SsrChangeOccured);
        connection.On<string>("ConnectionStatusChangeOccured", ConnectionStatusChangeOccured);

        _beerFactoryEventHandler.TemperatureChangeOccured(TemperatureChangeOccured);

        await connection.StartAsync();
    }

    void TemperatureChangeOccured(TemperatureChange temperatureChange) {
        if (temperatureChange.Id == ThermometerId.HLT) {
            Temperature = (double)temperatureChange.Value;
        }
    }



    Task TemperatureChangeOccured(string temperatureChangeJson) {
        var temperatureChange = JsonConvert.DeserializeObject<TemperatureChange>(temperatureChangeJson);
        Messages.Insert(0, $"SIGNALR-TEMP: {temperatureChange.Id} - {temperatureChange.Value} {temperatureChange.PercentChange.ToString("#.00")}");


        if (temperatureChange.Id == ThermometerId.HLT) {
            //Temperature = (double)temperatureChange.Value;
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    Task PumpChangeOccured(string pumpChangeJson) {
        var pumpChange = JsonConvert.DeserializeObject<PumpChange>(pumpChangeJson);
        Messages.Insert(0, $"SIGNALR-PUMP: {pumpChange.Id} - {pumpChange.IsEngaged}");
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task PidChangeOccured(string pidChangeJson) {
        var pidChange = JsonConvert.DeserializeObject<PidChange>(pidChangeJson);
        Messages.Insert(0, $"SIGNALR-PID: {pidChange.Id} - {pidChange.IsEngaged} {pidChange.SetPoint}");
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task SsrChangeOccured(string ssrChangeJson) {
        var ssrChange = JsonConvert.DeserializeObject<SsrChange>(ssrChangeJson);
        Messages.Insert(0, $"SIGNALR-SSR: {ssrChange.Id} - {ssrChange.IsEngaged} {ssrChange.Percentage}");
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task ConnectionStatusChangeOccured(string connectionStatusChangeJson) {
        var connectionStatusChange = JsonConvert.DeserializeObject<ConnectionStatusChange>(connectionStatusChangeJson);
        Messages.Insert(0, $"SIGNALR-CONNECTION: {connectionStatusChange.ConnectionState}");
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task SendMessage() {
        await connection.InvokeAsync("SendMessage", User, Message);
    }

    Task OnReceiveMessage(string name, string message) {
        Messages.Insert(0, $"SIGNALR-MESSAGE{name} : {message}");
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task UpdateSetPoint(int setPoint) {

        //await connection.InvokeAsync("PidRequestOccured", )
    }

    bool ValidateCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) {
        // TODO: You can do custom validation here, or just return true to always accept the certificate.
        // DO NOT use custom validation logic in a production application as it is insecure.
        return true;
    }
}





